[
  {
    "id": 1,
    "question": "Какие типы данных существуют в JavaScript?",
    "answers": [
      "Числа, строки, логический тип, Object, null, undefined, Symbol, BigInt",
      "Целые числа, строки, логический тип, JSON, null, undefined, Symbol, BigInt",
      "Числа, строки, булевы значения, объект, null, undefined, Date, BigInt",
      "Числа, строки, логический тип, объект, null, undefined, символы, даты"
    ],
    "correct_answer": "Числа, строки, логический тип, Object, null, undefined, Symbol, BigInt"
  },
  {
    "id": 2,
    "question": "В чем разница между операторами '==' и '==='?",
    "answers": [
      "'==' проверяет на абстрактное равенство, '===' проверяет на строгое равенство",
      "'==' проверяет на строгое равенство, '===' проверяет на абстрактное равенство",
      "'==' и '===' проверяют на абстрактное равенство, но '===' более строгий",
      "'==' и '===' проверяют на строгое равенство, но '==' более гибкий"
    ],
    "correct_answer": "'==' проверяет на абстрактное равенство, '===' проверяет на строгое равенство"
  },
  {
    "id": 3,
    "question": "Какими способами можно объявить переменную в JavaScript?",
    "answers": [
      "a = 5, var a = 5, let a = 5, const a = 5",
      "a = 5, var a = 5, let a = 5, static a = 5",
      "var a = 5, let a = 5, const a = 5, function a() {}",
      "let a = 5, const a = 5, a = 5, new a = 5"
    ],
    "correct_answer": "a = 5, var a = 5, let a = 5, const a = 5"
  },
  {
    "id": 4,
    "question": "В чем разница между null и undefined в JavaScript?",
    "answers": [
      "undefined означает отсутствие значения, null — это специальное значение для «ничего»",
      "null — это отсутствие значения, undefined — это ошибка переменной",
      "null используется для указания ошибки, undefined — это пустое значение",
      "null и undefined взаимозаменяемы, оба означают «пусто»"
    ],
    "correct_answer": "undefined означает отсутствие значения, null — это специальное значение для «ничего»"
  },
  {
    "id": 5,
    "question": "Для чего используются методы map, filter, reduce, forEach в JavaScript?",
    "answers": [
      "forEach для перебора, map для трансформации, filter для фильтрации, reduce для последовательной обработки",
      "forEach для трансформации, map для фильтрации, filter для последовательной обработки, reduce для перебора",
      "forEach для фильтрации, map для перебора, filter для трансформации, reduce для фильтрации",
      "forEach для обработки, map для перебора, filter для сортировки, reduce для трансформации"
    ],
    "correct_answer": "forEach для перебора, map для трансформации, filter для фильтрации, reduce для последовательной обработки"
  },
  {
    "id": 6,
    "question": "В чем отличие стрелочных функций от функций, объявленных через function?",
    "answers": [
      "Стрелочные функции не имеют своего this, не могут быть конструкторами и не имеют arguments",
      "Стрелочные функции не имеют своего this, но могут быть конструкторами",
      "Стрелочные функции имеют свой this, но не могут быть конструкторами и не имеют arguments",
      "Стрелочные функции не имеют своего this, не могут быть конструкторами, но имеют arguments"
    ],
    "correct_answer": "Стрелочные функции не имеют своего this, не могут быть конструкторами и не имеют arguments"
  },
  {
    "id": 7,
    "question": "Что такое замыкание в JavaScript?",
    "answers": [
      "Замыкание — это функция, которая замыкает в себе внешние переменные",
      "Замыкание — это функция, которая не имеет доступа к внешним переменным",
      "Замыкание — это функция, которая создается внутри другой функции",
      "Замыкание — это функция, которая выполняется сразу после создания"
    ],
    "correct_answer": "Замыкание — это функция, которая замыкает в себе внешние переменные"
  },
  {
    "id": 8,
    "question": "Что такое шаблонные литералы и для чего они нужны?",
    "answers": [
      "Шаблонные литералы позволяют использовать переменные и выражения внутри строк",
      "Шаблонные литералы — это строки с фиксированным значением",
      "Шаблонные литералы — это строки, которые нельзя изменять",
      "Шаблонные литералы позволяют создавать строки с использованием только переменных"
    ],
    "correct_answer": "Шаблонные литералы позволяют использовать переменные и выражения внутри строк"
  },
  {
    "id": 9,
    "question": "Что такое Set и Map в JavaScript?",
    "answers": [
      "Set — это множество уникальных значений, Map — коллекция ключ/значение",
      "Set — это коллекция ключ/значение, Map — множество уникальных значений",
      "Set — это массив уникальных значений, Map — коллекция объектов",
      "Set — это коллекция объектов, Map — массив уникальных значений"
    ],
    "correct_answer": "Set — это множество уникальных значений, Map — коллекция ключ/значение"
  },
  {
    "id": 10,
    "question": "Как определить наличие свойства в объекте в JavaScript?",
    "answers": [
      "С помощью метода hasOwnProperty или оператора in",
      "С помощью оператора typeof",
      "С помощью метода includes",
      "С помощью метода indexOf"
    ],
    "correct_answer": "С помощью метода hasOwnProperty или оператора in"
  },
  {
    "id": 11,
    "question": "Какие способы создания объекта вы знаете?",
    "answers": [
      "С помощью функции create",
      "С помощью оператора new",
      "С помощью метода assign",
      "С помощью spread-оператора"
    ],
    "correct_answer": "С помощью функции create"
  },
  {
    "id": 12,
    "question": "Какие значения являются falsy (ложными) значениями?",
    "answers": [
      "0, '', null, undefined, NaN, false",
      "0, 1, null, undefined, NaN, false",
      "1, '', null, undefined, NaN, false",
      "0, '', null, undefined, NaN, true"
    ],
    "correct_answer": "0, '', null, undefined, NaN, false"
  },
  {
    "id": 13,
    "question": "Что такое Promise в JavaScript?",
    "answers": [
      "Promise — это объект для работы с асинхронным кодом",
      "Promise — это функция для работы с асинхронным кодом",
      "Promise — это метод объекта для работы с асинхронным кодом",
      "Promise — это оператор для работы с асинхронным кодом"
    ],
    "correct_answer": "Promise — это объект для работы с асинхронным кодом"
  },
  {
    "id": 14,
    "question": "Как использовать async/await для асинхронных запросов?",
    "answers": [
      "Async/await позволяет писать асинхронный код, который выглядит как синхронный",
      "Async/await заменяет промисы",
      "Async/await позволяет делать код синхронным",
      "Async/await используется только для обработки ошибок"
    ],
    "correct_answer": "Async/await позволяет писать асинхронный код, который выглядит как синхронный"
  },
  {
    "id": 15,
    "question": "Для чего нужен оператор spread в JavaScript?",
    "answers": [
      "Spread используется для разворачивания массивов или объектов",
      "Spread используется для копирования массивов или объектов",
      "Spread используется для создания новых массивов или объектов",
      "Spread используется для слияния массивов или объектов"
    ],
    "correct_answer": "Spread используется для разворачивания массивов или объектов"
  },
  {
    "id": 16,
    "question": "Как избежать ссылочной зависимости при копировании объекта?",
    "answers": [
      "Использовать глубокое копирование с JSON.stringify/JSON.parse",
      "Использовать spread-оператор",
      "Использовать Object.assign",
      "Использовать функцию копирования"
    ],
    "correct_answer": "Использовать глубокое копирование с JSON.stringify/JSON.parse"
  },
  {
    "id": 17,
    "question": "Как поменять контекст функции в JavaScript?",
    "answers": [
      "С помощью методов call, bind, apply",
      "С помощью оператора new",
      "С помощью методов push, pop",
      "С помощью метода map"
    ],
    "correct_answer": "С помощью методов call, bind, apply"
  },
  {
    "id": 18,
    "question": "Что такое тернарный оператор в JavaScript?",
    "answers": [
      "Тернарный оператор — это оператор с тремя операндами, использующийся для сокращенной записи if-else",
      "Тернарный оператор — это оператор с двумя операндами",
      "Тернарный оператор — это оператор с одним операндом",
      "Тернарный оператор — это оператор для работы с числами"
    ],
    "correct_answer": "Тернарный оператор — это оператор с тремя операндами, использующийся для сокращенной записи if-else"
  },
  {
    "id": 19,
    "question": "Что такое деструктуризация в JavaScript?",
    "answers": [
      "Деструктуризация — это способ извлечения данных из массивов и объектов",
      "Деструктуризация — это способ создания массивов и объектов",
      "Деструктуризация — это способ изменения массивов и объектов",
      "Деструктуризация — это способ удаления данных из массивов и объектов"
    ],
    "correct_answer": "Деструктуризация — это способ извлечения данных из массивов и объектов"
  },
  {
    "id": 20,
    "question": "Какие способы работы с асинхронным кодом вы знаете?",
    "answers": [
      "Callbacks, Promises, async/await",
      "Loops, Promises, async/await",
      "Events, Callbacks, async/await",
      "Timers, Promises, async/await"
    ],
    "correct_answer": "Callbacks, Promises, async/await"
  },
  {
    "id": 21,
    "question": "Для чего нужны функции e.preventDefault() и e.stopPropagation()?",
    "answers": [
      "Для предотвращения дефолтного поведения браузера и остановки всплытия событий",
      "Для создания новых событий",
      "Для изменения DOM-элементов",
      "Для добавления новых слушателей событий"
    ],
    "correct_answer": "Для предотвращения дефолтного поведения браузера и остановки всплытия событий"
  },
  {
    "id": 22,
    "question": "Как отслеживать и обрабатывать ошибки в JavaScript?",
    "answers": [
      "Использовать конструкцию try...catch",
      "Использовать функцию setTimeout",
      "Использовать метод catch",
      "Использовать оператор if"
    ],
    "correct_answer": "Использовать конструкцию try...catch"
  },
  {
    "id": 23,
    "question": "Что такое DOM-дерево?",
    "answers": [
      "DOM-дерево — это представление HTML-документа в виде дерева тегов",
      "DOM-дерево — это представление CSS-документа в виде дерева тегов",
      "DOM-дерево — это представление JavaScript-кода в виде дерева функций",
      "DOM-дерево — это представление базы данных в виде дерева таблиц"
    ],
    "correct_answer": "DOM-дерево — это представление HTML-документа в виде дерева тегов"
  },
  {
    "id": 24,
    "question": "Что такое event loop в JavaScript?",
    "answers": [
      "Event loop — это механизм, который управляет выполнением асинхронного кода в JavaScript",
      "Event loop — это цикл событий в JavaScript",
      "Event loop — это функция для обработки событий в JavaScript",
      "Event loop — это объект, который содержит события в JavaScript"
    ],
    "correct_answer": "Event loop — это механизм, который управляет выполнением асинхронного кода в JavaScript"
  },
  {
    "id": 25,
    "question": "Что такое прототипное наследование в JavaScript?",
    "answers": [
      "Прототипное наследование — это механизм, позволяющий объектам наследовать свойства и методы других объектов",
      "Прототипное наследование — это механизм, позволяющий объектам наследовать только методы других объектов",
      "Прототипное наследование — это механизм, позволяющий объектам наследовать только свойства других объектов",
      "Прототипное наследование — это механизм, позволяющий объектам наследовать значения других объектов"
    ],
    "correct_answer": "Прототипное наследование — это механизм, позволяющий объектам наследовать свойства и методы других объектов"
  },
  {
    "id": 26,
    "question": "Как получить свойство объекта в JavaScript?",
    "answers": [
      "С помощью оператора точки или квадратных скобок",
      "С помощью метода get",
      "С помощью оператора typeof",
      "С помощью метода find"
    ],
    "correct_answer": "С помощью оператора точки или квадратных скобок"
  },
  {
    "id": 27,
    "question": "Что такое всплытие и погружение событий в JavaScript?",
    "answers": [
      "Всплытие — это процесс, при котором событие сначала обрабатывается на элементе, а затем на его предках, погружение — наоборот",
      "Всплытие — это процесс, при котором событие обрабатывается только на элементе",
      "Всплытие — это процесс, при котором событие обрабатывается только на предках элемента",
      "Всплытие и погружение — это одинаковые процессы, при которых событие обрабатывается на элементе и его предках"
    ],
    "correct_answer": "Всплытие — это процесс, при котором событие сначала обрабатывается на элементе, а затем на его предках, погружение — наоборот"
  },
  {
    "id": 28,
    "question": "Для чего нужен оператор optional chaining (?.) в JavaScript?",
    "answers": [
      "Optional chaining позволяет безопасно обращаться к вложенным свойствам объектов, которые могут не существовать",
      "Optional chaining используется для создания новых свойств объектов",
      "Optional chaining позволяет изменять значения свойств объектов",
      "Optional chaining используется для удаления свойств объектов"
    ],
    "correct_answer": "Optional chaining позволяет безопасно обращаться к вложенным свойствам объектов, которые могут не существовать"
  },
  {
    "id": 29,
    "question": "Что такое Shadow DOM?",
    "answers": [
      "Shadow DOM — это техника для инкапсуляции стилей и логики внутри веб-компонентов",
      "Shadow DOM — это способ создания теней для элементов",
      "Shadow DOM — это метод для скрытия элементов на странице",
      "Shadow DOM — это техника для создания анимаций"
    ],
    "correct_answer": "Shadow DOM — это техника для инкапсуляции стилей и логики внутри веб-компонентов"
  },
  {
    "id": 30,
    "question": "В чем разница между function expression и function declaration в JavaScript?",
    "answers": [
      "Function declaration обрабатываются перед выполнением кода, а function expression — только когда до них доходит выполнение",
      "Function expression обрабатываются перед выполнением кода, а function declaration — только когда до них доходит выполнение",
      "Function declaration и function expression обрабатываются одинаково",
      "Function declaration используются для создания анонимных функций, а function expression — для именованных функций"
    ],
    "correct_answer": "Function declaration обрабатываются перед выполнением кода, а function expression — только когда до них доходит выполнение"
  },
  {
    "id": 31,
    "question": "Для чего нужны полифилы в JavaScript?",
    "answers": [
      "Полифилы добавляют поддержку новых возможностей в старые браузеры",
      "Полифилы улучшают производительность кода",
      "Полифилы добавляют новые функции в JavaScript",
      "Полифилы уменьшают размер кода"
    ],
    "correct_answer": "Полифилы добавляют поддержку новых возможностей в старые браузеры"
  },
  {
    "id": 32,
    "question": "Что такое функции-конструкторы в JavaScript?",
    "answers": [
      "Функции-конструкторы — это функции, которые создают объекты и задают их свойства",
      "Функции-конструкторы — это функции, которые изменяют объекты",
      "Функции-конструкторы — это функции, которые удаляют объекты",
      "Функции-конструкторы — это функции, которые клонируют объекты"
    ],
    "correct_answer": "Функции-конструкторы — это функции, которые создают объекты и задают их свойства"
  },
  {
    "id": 33,
    "question": "Как можно получить список полей и значений объекта в JavaScript?",
    "answers": [
      "С помощью методов Object.keys и Object.values",
      "С помощью метода Object.entries",
      "С помощью метода Object.getOwnPropertyNames",
      "С помощью метода Array.from"
    ],
    "correct_answer": "С помощью методов Object.keys и Object.values"
  },
  {
    "id": 34,
    "question": "Как сделать наследование класса в ES6?",
    "answers": [
      "С помощью ключевого слова extends",
      "С помощью ключевого слова super",
      "С помощью ключевого слова prototype",
      "С помощью ключевого слова inherit"
    ],
    "correct_answer": "С помощью ключевого слова extends"
  },
  {
    "id": 35,
    "question": "Что такое микро- и макротаски в JavaScript?",
    "answers": [
      "Микротаски выполняются перед макротасками, они используются для более быстрых операций",
      "Макротаски выполняются перед микротасками, они используются для более медленных операций",
      "Микротаски и макротаски выполняются одновременно",
      "Микротаски используются только в синхронном коде, макротаски — в асинхронном"
    ],
    "correct_answer": "Микротаски выполняются перед макротасками, они используются для более быстрых операций"
  },
  {
    "id": 36,
    "question": "Что такое генераторы в JavaScript и как они работают?",
    "answers": [
      "Генераторы — это функции, которые могут порождать множество значений одно за другим, используя yield",
      "Генераторы — это функции, которые создают новые объекты",
      "Генераторы — это функции, которые изменяют значения переменных",
      "Генераторы — это функции, которые вызываются автоматически"
    ],
    "correct_answer": "Генераторы — это функции, которые могут порождать множество значений одно за другим, используя yield"
  },
  {
    "id": 37,
    "question": "Какие способы хранения данных в браузере вы знаете?",
    "answers": [
      "LocalStorage, SessionStorage, Cookies, IndexedDB",
      "LocalStorage, GlobalStorage, Cookies, SQL",
      "SessionStorage, Cookies, MongoDB, Firebase",
      "Cookies, IndexedDB, MySQL, WebSQL"
    ],
    "correct_answer": "LocalStorage, SessionStorage, Cookies, IndexedDB"
  },
  {
    "id": 38,
    "question": "В чем отличие sessionStorage от localStorage?",
    "answers": [
      "SessionStorage хранит данные на время сессии, а localStorage — постоянно",
      "SessionStorage хранит данные постоянно, а localStorage — на время сессии",
      "SessionStorage и localStorage хранят данные одинаково",
      "SessionStorage хранит только строки, а localStorage — любые данные"
    ],
    "correct_answer": "SessionStorage хранит данные на время сессии, а localStorage — постоянно"
  },
  {
    "id": 39,
    "question": "Как сервер может запретить чтение cookie из браузера?",
    "answers": [
      "С помощью флага HttpOnly",
      "С помощью флага Secure",
      "С помощью флага SameSite",
      "С помощью флага NoCookie"
    ],
    "correct_answer": "С помощью флага HttpOnly"
  },
  {
    "id": 40,
    "question": "Что представляют из себя регулярные выражения и для чего они нужны?",
    "answers": [
      "Регулярные выражения — это строки, заданные по особым правилам, для поиска и замены сложных конструкций в строках",
      "Регулярные выражения — это функции для работы со строками",
      "Регулярные выражения — это методы для работы с массивами",
      "Регулярные выражения — это объекты для работы с числами"
    ],
    "correct_answer": "Регулярные выражения — это строки, заданные по особым правилам, для поиска и замены сложных конструкций в строках"
  },
  {
    "id": 41,
    "question": "Чем WeakSet и WeakMap отличаются от Set и Map?",
    "answers": [
      "WeakSet и WeakMap хранят только ссылки на объекты и автоматически удаляют недостижимые объекты",
      "WeakSet и WeakMap хранят примитивные значения, а Set и Map — объекты",
      "WeakSet и WeakMap используются для больших данных, а Set и Map — для малых",
      "WeakSet и WeakMap не поддерживают ключи, а Set и Map — поддерживают"
    ],
    "correct_answer": "WeakSet и WeakMap хранят только ссылки на объекты и автоматически удаляют недостижимые объекты"
  },
  {
    "id": 42,
    "question": "Почему два объекта с одинаковыми полями при сравнении дают false?",
    "answers": [
      "Потому что объекты сравниваются по ссылкам на область в памяти",
      "Потому что объекты сравниваются по значениям полей",
      "Потому что объекты всегда дают false при сравнении",
      "Потому что объекты сравниваются по типу данных"
    ],
    "correct_answer": "Потому что объекты сравниваются по ссылкам на область в памяти"
  },
  {
    "id": 43,
    "question": "Почему у примитивов (number, string) можно вызывать методы?",
    "answers": [
      "Потому что JavaScript автоматически оборачивает примитивы в объекты",
      "Потому что примитивы в JavaScript являются объектами",
      "Потому что JavaScript преобразует примитивы в строки",
      "Потому что примитивы всегда имеют методы по умолчанию"
    ],
    "correct_answer": "Потому что JavaScript автоматически оборачивает примитивы в объекты"
  },
  {
    "id": 44,
    "question": "Как проверить, из какого класса был создан объект?",
    "answers": [
      "С помощью оператора instanceof",
      "С помощью метода typeof",
      "С помощью метода isPrototypeOf",
      "С помощью метода hasOwnProperty"
    ],
    "correct_answer": "С помощью оператора instanceof"
  },
  {
    "id": 45,
    "question": "Напишите код, который будет выводить в логи каждые 5 секунд время пребывания на сайте в секундах.",
    "answers": [
      "Использовать setInterval и console.log с переменной, отсчитывающей время",
      "Использовать setTimeout и console.log",
      "Использовать setInterval и alert",
      "Использовать setTimeout и alert"
    ],
    "correct_answer": "Использовать setInterval и console.log с переменной, отсчитывающей время"
  },
  {
    "id": 46,
    "question": "Как остановить интервал?",
    "answers": [
      "С помощью clearInterval",
      "С помощью clearTimeout",
      "С помощью stopInterval",
      "С помощью stopTimeout"
    ],
    "correct_answer": "С помощью clearInterval"
  },
  {
    "id": 47,
    "question": "Что представляет из себя чистая функция?",
    "answers": [
      "Функция, которая всегда возвращает одинаковый результат для одного и того же набора аргументов и не имеет побочных эффектов",
      "Функция, которая не изменяет внешние переменные",
      "Функция, которая вызывается только один раз",
      "Функция, которая всегда возвращает undefined"
    ],
    "correct_answer": "Функция, которая всегда возвращает одинаковый результат для одного и того же набора аргументов и не имеет побочных эффектов"
  },
  {
    "id": 48,
    "question": "Что представляет из себя функция высшего порядка?",
    "answers": [
      "Функция, которая может принимать другую функцию в качестве аргумента или возвращать другую функцию в качестве результата",
      "Функция, которая возвращает объект",
      "Функция, которая принимает массив",
      "Функция, которая изменяет внешние переменные"
    ],
    "correct_answer": "Функция, которая может принимать другую функцию в качестве аргумента или возвращать другую функцию в качестве результата"
  },
  {
    "id": 49,
    "question": "Зачем нужны промисы, если можно работать с асинхронным кодом с помощью функций обратного вызова (callbacks)?",
    "answers": [
      "Промисы делают код более читабельным и управляемым, избегая callback hell",
      "Промисы работают быстрее, чем функции обратного вызова",
      "Промисы позволяют работать только с асинхронным кодом",
      "Промисы нужны для работы с синхронным кодом"
    ],
    "correct_answer": "Промисы делают код более читабельным и управляемым, избегая callback hell"
  },
  {
    "id": 50,
    "question": "Что будет, если добавить скрипт перед тегом body?",
    "answers": [
      "Скрипт выполнится до загрузки всей страницы, что может блокировать рендеринг",
      "Скрипт выполнится после загрузки всей страницы",
      "Скрипт не выполнится",
      "Скрипт выполнится, но только после загрузки других скриптов"
    ],
    "correct_answer": "Скрипт выполнится до загрузки всей страницы, что может блокировать рендеринг"
  },
  {
    "id": 51,
    "question": "Как проверить, является ли объект массивом?",
    "answers": [
      "С помощью метода Array.isArray()",
      "С помощью метода typeof",
      "С помощью метода isArray",
      "С помощью метода instanceOf"
    ],
    "correct_answer": "С помощью метода Array.isArray()"
  },
  {
    "id": 52,
    "question": "Что такое рекурсия и как предотвратить бесконечную рекурсию?",
    "answers": [
      "Рекурсия — это способ, при котором функция вызывает сама себя; для предотвращения бесконечной рекурсии нужно задать условие остановки",
      "Рекурсия — это способ, при котором функция вызывает другие функции; для предотвращения бесконечной рекурсии нужно задавать ограничения на количество вызовов",
      "Рекурсия — это способ, при котором функция вызывается несколько раз подряд; для предотвращения бесконечной рекурсии нужно использовать таймеры",
      "Рекурсия — это способ, при котором функция работает с асинхронным кодом; для предотвращения бесконечной рекурсии нужно использовать промисы"
    ],
    "correct_answer": "Рекурсия — это способ, при котором функция вызывает сама себя; для предотвращения бесконечной рекурсии нужно задать условие остановки"
  },
  {
    "id": 53,
    "question": "Что такое HTTP?",
    "answers": [
      "HTTP — это протокол передачи гипертекста, используемый для обмена данными между веб-браузером и сервером",
      "HTTP — это язык программирования для веб-приложений",
      "HTTP — это метод запроса данных с сервера",
      "HTTP — это библиотека для работы с веб-приложениями"
    ],
    "correct_answer": "HTTP — это протокол передачи гипертекста, используемый для обмена данными между веб-браузером и сервером"
  },
  {
    "id": 54,
    "question": "Из чего состоит HTTP-запрос?",
    "answers": [
      "Стартовая строка, заголовки, тело сообщения",
      "Стартовая строка, параметры, тело сообщения",
      "Заголовки, параметры, тело сообщения",
      "Заголовки, параметры, ответ сервера"
    ],
    "correct_answer": "Стартовая строка, заголовки, тело сообщения"
  },
  {
    "id": 55,
    "question": "Какие методы HTTP-запросов вы знаете?",
    "answers": [
      "GET, POST, PUT, DELETE, HEAD, CONNECT, OPTIONS, TRACE, PATCH",
      "GET, POST, PUSH, DELETE, HEAD, CONNECT, OPTIONS, TRACE, PATCH",
      "GET, POST, PUSH, DELETE, HEAD, TRACE, OPTIONS, CONNECT, PATCH",
      "GET, POST, PUT, DELETE, HEAD, TRACE, OPTIONS, CONNECT, PATCH"
    ],
    "correct_answer": "GET, POST, PUT, DELETE, HEAD, CONNECT, OPTIONS, TRACE, PATCH"
  },
  {
    "id": 56,
    "question": "В чем семантическое отличие между методами PUT и PATCH в HTTP?",
    "answers": [
      "PATCH обновляет ресурс частично, PUT перезаписывает его полностью",
      "PUT обновляет ресурс частично, PATCH перезаписывает его полностью",
      "PATCH удаляет ресурс, PUT создает новый",
      "PUT удаляет ресурс, PATCH создает новый"
    ],
    "correct_answer": "PATCH обновляет ресурс частично, PUT перезаписывает его полностью"
  },
  {
    "id": 57,
    "question": "Что такое WebSockets?",
    "answers": [
      "WebSockets — это протокол, позволяющий устанавливать двустороннюю связь между клиентом и сервером в реальном времени",
      "WebSockets — это библиотека для работы с сетевыми запросами",
      "WebSockets — это способ хранения данных на сервере",
      "WebSockets — это формат данных, передаваемых по сети"
    ],
    "correct_answer": "WebSockets — это протокол, позволяющий устанавливать двустороннюю связь между клиентом и сервером в реальном времени"
  },
  {
    "id": 58,
    "question": "Что такое REST API?",
    "answers": [
      "REST API — это архитектурный стиль для создания веб-сервисов, основанный на протоколе HTTP",
      "REST API — это язык программирования для веб-приложений",
      "REST API — это библиотека для работы с веб-приложениями",
      "REST API — это формат данных для передачи по сети"
    ],
    "correct_answer": "REST API — это архитектурный стиль для создания веб-сервисов, основанный на протоколе HTTP"
  },
  {
    "id": 59,
    "question": "Что такое WebRTC?",
    "answers": [
      "WebRTC — это технология, позволяющая осуществлять аудио- и видеосвязь через браузер без использования дополнительных плагинов",
      "WebRTC — это библиотека для работы с аудио и видео",
      "WebRTC — это формат данных для передачи аудио и видео по сети",
      "WebRTC — это протокол для передачи файлов по сети"
    ],
    "correct_answer": "WebRTC — это технология, позволяющая осуществлять аудио- и видеосвязь через браузер без использования дополнительных плагинов"
  },
  {
    "id": 60,
    "question": "Что такое Git?",
    "answers": [
      "Git — это распределенная система контроля версий, используемая для управления изменениями в коде",
      "Git — это язык программирования для управления кодом",
      "Git — это протокол для передачи данных между серверами",
      "Git — это библиотека для работы с сетевыми запросами"
    ],
    "correct_answer": "Git — это распределенная система контроля версий, используемая для управления изменениями в коде"
  },
  {
    "id": 61,
    "question": "Как сделать коммит в Git?",
    "answers": [
      "git commit -m 'commit message'",
      "git add -m 'commit message'",
      "git commit -a 'commit message'",
      "git push -m 'commit message'"
    ],
    "correct_answer": "git commit -m 'commit message'"
  },
  {
    "id": 62,
    "question": "Как создать новую ветку и перейти на нее в Git?",
    "answers": [
      "git checkout -b 'branch_name'",
      "git branch -b 'branch_name'",
      "git create -b 'branch_name'",
      "git switch -b 'branch_name'"
    ],
    "correct_answer": "git checkout -b 'branch_name'"
  },
  {
    "id": 63,
    "question": "Какие отличия между merge и rebase в Git?",
    "answers": [
      "Merge объединяет изменения из разных веток, а rebase перемещает коммиты из одной ветки в другую",
      "Merge создает новый коммит, а rebase удаляет коммиты",
      "Merge удаляет конфликты, а rebase объединяет изменения",
      "Merge перемещает коммиты, а rebase создает новый коммит"
    ],
    "correct_answer": "Merge объединяет изменения из разных веток, а rebase перемещает коммиты из одной ветки в другую"
  },
  {
    "id": 64,
    "question": "На каких трех принципах базируется ООП?",
    "answers": [
      "Инкапсуляция, наследование, полиморфизм",
      "Наследование, интерфейсы, абстракция",
      "Полиморфизм, перегрузка, инкапсуляция",
      "Абстракция, наследование, композиция"
    ],
    "correct_answer": "Инкапсуляция, наследование, полиморфизм"
  },
  {
    "id": 65,
    "question": "Какие паттерны проектирования вы чаще всего используете?",
    "answers": [
      "Singleton, Factory, Observer",
      "Decorator, Adapter, Strategy",
      "Factory, Adapter, Observer",
      "Decorator, Strategy, Singleton"
    ],
    "correct_answer": "Singleton, Factory, Observer"
  },
  {
    "id": 66,
    "question": "Для чего нужен файл package.json?",
    "answers": [
      "Для управления зависимостями и метаданными проекта",
      "Для хранения данных пользователя",
      "Для определения структуры проекта",
      "Для создания новых модулей в проекте"
    ],
    "correct_answer": "Для управления зависимостями и метаданными проекта"
  },
  {
    "id": 67,
    "question": "Расскажите о принципах SOLID.",
    "answers": [
      "Принципы SOLID — это набор рекомендаций для улучшения структуры и дизайна кода",
      "Принципы SOLID — это набор правил для написания тестов",
      "Принципы SOLID — это набор инструментов для оптимизации кода",
      "Принципы SOLID — это набор рекомендаций для работы с базами данных"
    ],
    "correct_answer": "Принципы SOLID — это набор рекомендаций для улучшения структуры и дизайна кода"
  }
]
